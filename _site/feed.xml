<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FricolaB - People Oriented Open Source Software</title>
    <description>Fricolab is a multidisciplinary project led by David A. Lareo. We believe that open technology is one of the main tools for promoting social change and help to build a fairer and more beautiful world.
</description>
    <link>https://fricolab.github.io//</link>
    <atom:link href="https://fricolab.github.io//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 13 Jan 2016 15:01:46 +0100</pubDate>
    <lastBuildDate>Wed, 13 Jan 2016 15:01:46 +0100</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Docker Compose y WordPress: juntos pero no revueltos</title>
        <description>&lt;p&gt;Desde hace ya algunos meses estamos trabajando con &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt;, &lt;strong&gt;un software/plataforma para desarrolladores y administradores de sistema&lt;/strong&gt; usado también por los &lt;strong&gt;peces gordos de la web&lt;/strong&gt; como &lt;a href=&quot;https://www.spotify.com/es/&quot;&gt;Spotify&lt;/a&gt; o &lt;a href=&quot;https://taiga.io/&quot;&gt;Taiga&lt;/a&gt;, una alternativa a &lt;a href=&quot;https://trello.com/&quot;&gt;Trello&lt;/a&gt; con software libre que también usamos desde hace un tiempo.&lt;/p&gt;

&lt;p&gt;Quizá aquellas que aún no conocen Docker se pregunten qué es lo que esta nueva plataforma viene a solucionar o a mejorar. Destacamos &lt;strong&gt;sus principales ventajas&lt;/strong&gt; en los siguientes puntos:&lt;/p&gt;

&lt;p&gt;– &lt;strong&gt;Agilidad&lt;/strong&gt;: El despliegue de una aplicación con Docker es mucho &lt;strong&gt;más rápido y sencillo&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;– &lt;strong&gt;Portabilidad&lt;/strong&gt;: Nuestras aplicaciones se podrán ejecutar en cualquier otra máquina en la que esté instalado Docker.&lt;/p&gt;

&lt;p&gt;– &lt;strong&gt;Flexibilidad&lt;/strong&gt;: Docker se adapta a nuestros requisitos, pues “viene con las pilas puestas, pero se pueden sacar”, esto es, &lt;strong&gt;incorpora soluciones nativas&lt;/strong&gt; pero es susceptible de integrarse con otras.&lt;/p&gt;

&lt;p&gt;– &lt;strong&gt;Escalabilidad&lt;/strong&gt;: Una de las bazas más interesantes de Docker es la &lt;strong&gt;facilidad con la que escala, tanto horizontal como verticalmente&lt;/strong&gt;. En relación a la escalabilidad de Docker es especialmente interesante &lt;a href=&quot;https://docs.docker.com/swarm/&quot;&gt;Docker Swarm&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;– &lt;strong&gt;muchas más&lt;/strong&gt; que puedes descubrir tú misma…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt; tiene un &lt;strong&gt;repositorio propio de aplicaciones&lt;/strong&gt; (&lt;a href=&quot;https://hub.docker.com/&quot;&gt;Registry Hub&lt;/a&gt;) en el que podemos encontrar imágenes de nuestras aplicaciones preferidas, incluyendo &lt;a href=&quot;https://hub.docker.com/_/wordpress/&quot;&gt;WordPress&lt;/a&gt;, por supuesto. Sin embargo, nuestra experiencia usando &lt;strong&gt;Docker&lt;/strong&gt; y &lt;strong&gt;WordPress&lt;/strong&gt; conjuntamente nos ha enseñado que la solución oficial no resuelve todos los problemas que el diseñador o desarrollador se encuentra. El principal es la posibilidad de &lt;strong&gt;instalar nuevos plugins y temas&lt;/strong&gt;, así como modificar los existentes sin necesidad de modificar la imagen original, esto es, de manera que los cambios que realicemos en el código se incorporen al proyecto automáticamente, como haríamos con cualquier instalación de WordPress. Otra cuestión relevante que creemos que se puede mejorar es el proceso de creación de los contenedores, esto es, el despliegue de la aplicación o su instalación en un determinado host. Pero no nos vamos muy lejos, pues la solución viene de la mano de Docker, con &lt;a href=&quot;https://docs.docker.com/compose/&quot;&gt;Docker Compose&lt;/a&gt;, una aplicación de reciente incorporación a la caja de herramientas de Docker, junto a Swarm (que ya hemos mencionado) y &lt;a href=&quot;https://docs.docker.com/machine/&quot;&gt;Docker Machine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Excede el alcance de este pequeño post explicar con detalles las características de Docker, así como las posibilidades que se abren y que constantemente dan lugar a nuevas aplicaciones. Explico pues cual es el &lt;strong&gt;proceso para tener una instalación de WordPress dockerizada&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;En &lt;strong&gt;primer lugar&lt;/strong&gt; deberemos instalar en nuestro host &lt;a href=&quot;https://docs.docker.com/installation/&quot;&gt;Docker&lt;/a&gt; y &lt;a href=&quot;https://docs.docker.com/compose/install/&quot;&gt;Docker Compose&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A continuación descargaremos la última versión de WordPress disponible con este comando:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ curl https://wordpress.org/latest.tar.gz | tar -xvzf -&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;En el directorio en el que hemos descomprimido WordPress crearemos ahora un par de archivos:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;a) docker-compose.yml&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Este archivo nos permitirá definir como queremos que se integren los dos contenedores que necesitamos, WordPress y una base de datos MySql, y también nos permitirá definir un volumen de datos para poder modificar los archivos de nuestra aplicación: instalar plugins, modificar el &lt;em&gt;wp-config.php&lt;/em&gt;, etc.&lt;/p&gt;

&lt;p&gt;El contenido de este archivo será el siguiente:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wordpress:
   image: wordpress
   volumes:
   - .:/var/www/html
   links:
   - db:mysql
   ports:
   - 8080:80
db:
   image: mariadb
   environment:
   MYSQL_ROOT_PASSWORD: password
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sin entrar en detalles acerca de la sintaxis de este archivo, solamente indicar que en él estamos indicando los dos contenedores (&lt;em&gt;wordpress&lt;/em&gt; y &lt;em&gt;db&lt;/em&gt;) que formarán nuestra aplicación con Docker, así como la imágenes de las que dependen (&lt;em&gt;wordpress&lt;/em&gt; y &lt;em&gt;mariadb&lt;/em&gt;), estableciendo un enlace entre ellos, redirigiendo el puerto &lt;em&gt;8080&lt;/em&gt; de nuestro host al puerto &lt;em&gt;80&lt;/em&gt; de la aplicación y montando el directorio actual del &lt;em&gt;host&lt;/em&gt; en la ruta &lt;em&gt;/var/www/html&lt;/em&gt; del contenedor, esto es, donde están los archivos de WordPress, de manera que estamos utilizando los archivos que previamente hemos descargado de la web oficial de WordPress.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b) wp-config.php&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Este archivo lo podemos obtener copiando el existente wp-config-sample.php pero modificando algunos datos, de manera que el archivo definitivo sea algo parecido a:&lt;/p&gt;

&lt;p&gt;define(‘DB_NAME’, ‘wordpress’);&lt;/p&gt;

&lt;p&gt;define(‘DB_USER’, ‘root’);&lt;/p&gt;

&lt;p&gt;define(‘DB_PASSWORD’, ‘password’);&lt;/p&gt;

&lt;p&gt;define(‘DB_HOST’, “mysql”);&lt;/p&gt;

&lt;p&gt;define(‘DB_CHARSET’, ‘utf8’);&lt;/p&gt;

&lt;p&gt;define(‘DB_COLLATE’, ”);&lt;/p&gt;

&lt;p&gt;define(‘AUTH_KEY’, ‘put your unique phrase here’);&lt;/p&gt;

&lt;p&gt;define(‘SECURE_AUTH_KEY’, ‘put your unique phrase here’);&lt;/p&gt;

&lt;p&gt;define(‘LOGGED_IN_KEY’, ‘put your unique phrase here’);&lt;/p&gt;

&lt;p&gt;define(‘NONCE_KEY’, ‘put your unique phrase here’);&lt;/p&gt;

&lt;p&gt;define(‘AUTH_SALT’, ‘put your unique phrase here’);&lt;/p&gt;

&lt;p&gt;define(‘SECURE_AUTH_SALT’, ‘put your unique phrase here’);&lt;/p&gt;

&lt;p&gt;define(‘LOGGED_IN_SALT’, ‘put your unique phrase here’);&lt;/p&gt;

&lt;p&gt;define(‘NONCE_SALT’, ‘put your unique phrase here’);&lt;/p&gt;

&lt;p&gt;$table_prefix = ‘wp_’;&lt;/p&gt;

&lt;p&gt;define(‘WPLANG’, ”);&lt;/p&gt;

&lt;p&gt;define(‘WP_DEBUG’, false);&lt;/p&gt;

&lt;p&gt;if ( !defined(‘ABSPATH’) )&lt;/p&gt;

&lt;p&gt;define(‘ABSPATH’, dirname(__FILE__) . ‘/’);&lt;/p&gt;

&lt;p&gt;require_once(ABSPATH . ‘wp-settings.php’);&lt;/p&gt;

&lt;p&gt;Una vez que hayamos incorporado estos dos archivos, y habiendo instalado ya Docker y Docker Compose en nuestra máquina solamente tendremos que ejecutar el siguiente comando para instalar WordPress&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker-compose up&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;y ya podremos acceder a nuestra instalación desde la url&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://localhost:8080&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Un último detalle importante si queremos que nuestra instalación de WordPress sea operativa es cambiar los permisos en el directorio principal, permitiendo lectura y escritura al daemon de Docker&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo chmod -R 777 wordpress&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 22 Sep 2015 19:51:37 +0200</pubDate>
        <link>https://fricolab.github.io//docker-compose-y-wordpress-juntos-pero-no-revueltos/</link>
        <guid isPermaLink="true">https://fricolab.github.io//docker-compose-y-wordpress-juntos-pero-no-revueltos/</guid>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>Crea tu propia red de WordPress</title>
        <description>&lt;p&gt;Desde la versión 3.0 &lt;a href=&quot;https://wordpress.org/&quot; title=&quot;Wordpress&quot;&gt;WordPress&lt;/a&gt;, &lt;strong&gt;el gestor de contenidos más popular en la web&lt;/strong&gt; (alcanzando casi el 50% de todos los sitios web publicados &lt;a href=&quot;http://trends.builtwith.com/cms&quot; title=&quot;CMS Technologies Web Usage Statistics&quot;&gt;http://trends.builtwith.com/cms&lt;/a&gt;), nos permite configurar una &lt;strong&gt;red de blogs&lt;/strong&gt;, una funcionalidad anteriormente disponible en &lt;a href=&quot;https://mu.wordpress.org/&quot; title=&quot;Multisite Wordrpess&quot;&gt;WordPress Multisite&lt;/a&gt;. Esta funcionalidad tiene especial interés si queremos construir &lt;strong&gt;una comunidad de sitios web similar a WordPress.com&lt;/strong&gt;, asignando a cada uno de los sitios una URL personalizada, pero compartiendo todos ellos un mismo dominio. Imagina una &lt;strong&gt;web corporativa&lt;/strong&gt; en la que queremos incluir distintos blogs, de temáticas diferentes, o de autores diferentes, identificados en la &lt;strong&gt;URL con subdominios diferentes&lt;/strong&gt; pero todos ellos compartiendo el mismo dominio, algo así como:&lt;/p&gt;

&lt;p&gt;‘tecnología.dominio.com
emprendimiento.dominio.com
formacion.dominio.com`&lt;/p&gt;

&lt;p&gt;Pues bien, para ello tendríamos que &lt;strong&gt;hacer que cada subdominio apuntase a un blog diferente&lt;/strong&gt;, todos ellos relacionados y formando una única red que se podría administrar conjuntamente, especificando los plugins disponibles, los temas y otros elementos comunes.&lt;/p&gt;

&lt;p&gt;Si sabemos de antemano el número de blogs que vamos a crear tendremos que &lt;strong&gt;añadir a la configuración de Apache el nombre de los subdominios&lt;/strong&gt;, como por ejemplo en:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ServerName dominio.com
ServerAlias dominio.com subdominio1.domain.com
subdominio2.dominio.com
DocumentRoot
/var/www/directorio_en_el_que_está_instalado_wordpress`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pero quizá &lt;strong&gt;querramos ir creando distintos blogs&lt;/strong&gt;, o bien &lt;strong&gt;permitir que los usuarios creen su propio blog sin tener que estar modificando la configuración de nuestro servidor web&lt;/strong&gt;. Para ello incluiremos un &lt;strong&gt;wildcard&lt;/strong&gt; en el nombre del servidor, quedando la configuración de la siguiente manera:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ServerName wordpress.dev
ServerAlias *.wordpress.dev
ServerAdmin webmaster@localhost
DocumentRoot
/var/www/html/directorio_en_el_que_está_instalado_wordpress`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Recuerda además de &lt;strong&gt;incluir las siguientes directivas&lt;/strong&gt; en el directorio en el que quieres instalar WordPress:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Directory
/var/www/html/directorio_en_el_que_está_instalado_wordpress&amp;gt;
AllowOverride Fileinfo Options
AllowOverride All
&amp;lt;/Directory&amp;gt;`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora el siguiente paso será &lt;strong&gt;editar tu archivo wp-config.php&lt;/strong&gt; para incluir lo siguiente:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/* Multisite */
define( &#39;WP_ALLOW_MULTISITE&#39;, true );
define(&#39;MULTISITE&#39;, true);
define(&#39;SUBDOMAIN_INSTALL&#39;, true);
define(&#39;DOMAIN_CURRENT_SITE&#39;, &#39;dominio.com&#39;);
define(&#39;PATH_CURRENT_SITE&#39;, &#39;/&#39;);
define(&#39;SITE_ID_CURRENT_SITE&#39;, 1);
define(&#39;BLOG_ID_CURRENT_SITE&#39;, 1);`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Eso es todo. Ya tenemos nuestra red de WordPress activa y cada uno de los distintos blogs asignado a un subdominio diferente.&lt;/p&gt;
</description>
        <pubDate>Thu, 05 Feb 2015 18:36:56 +0100</pubDate>
        <link>https://fricolab.github.io//crea-tu-propia-red-de-wordpress/</link>
        <guid isPermaLink="true">https://fricolab.github.io//crea-tu-propia-red-de-wordpress/</guid>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>Desarrolla tu aplicación móvil en HTML5</title>
        <description>&lt;p&gt;Desarrollar apps no es una tarea sencilla. Sin embargo existen algunas herramientas que te permitirán dar el salto a las plataformas móviles sin necesidad de aprender los diferentes lenguajes de programación nativos de cada una de ellas: Android, iOS, Windows Phone, etc. Simplemente precisaremos conocer HTML5, el lenguaje standard en la programación web, y utilizar algunos framewoks de programación que a continuación presentaremos.&lt;/p&gt;

&lt;p&gt;Para un freelance disponer de las herramientas adecuadas es fundamental para poder optimizar al máximo el tiempo dedicado a cada proyecto, pudiendo de esta manera ofrecer productos y servicios adaptados a las necesidades de los clientes por un precio ajustado. Si además dichas herramientas son flexibles y adaptables, como es el caso del software open source, y disponen una amplia documentación y comunidad de desarrollo, como las que aquí vamos a presentar, podremos además ofrecer soluciones flexibles y abiertas.&lt;/p&gt;

&lt;h2 id=&quot;aplicaciones-mviles-en-html5&quot;&gt;Aplicaciones móviles en HTML5&lt;/h2&gt;

&lt;p&gt;Phonegap es una distribución de Apache Cordova, un proyecto de código abierto totalmente gratuito mantenido y mejorado por una amplia comunidad de desarrolladores con el apoyo de la Apache Foundation y Adobe. PhoneGap maneja una interfaz de programación (API) que nos permite lanzar funciones del dispositivo como la cámara, la agenda, los dispositivos de red y muchas otras. Para este fin utiliza lenguaje Javascript, por lo que podremos integrar funciones nativos en el teléfono sin necesidad de conocer el lenguaje específico de cada plataforma. Phonegap nos proporciona una serie de plugins para cada una de las funciones principales que deseamos incorporar en nuestra aplicación, constantemente mejorados y mantenidos por una amplia comunidad de desarrolladores y totalmente gratuitos.&lt;/p&gt;

&lt;p&gt;Además otra característica es la posibilidad de integrar distintos frameworks CSS para gestionar el diseño de nuestra aplicación, haciéndola totalmente adaptable a los distintos dispositivos, modificando el layout en función del tamaño y la orientación de la pantalla. Nuestro preferido, por su sencillez y su flexibilidad es Twitter Bootstrap. Además de Bootstrap será posible integrar otros muchos frameworks como Jquery Mobile, Sencha Touch, Zurb Foundation, etc.&lt;/p&gt;

&lt;h2 id=&quot;crea-tu-app-en-tres-sencillos-pasos&quot;&gt;Crea tu app en tres sencillos pasos&lt;/h2&gt;

&lt;p&gt;Phonegap dispone de una amplia documentación a tu alcance, que puedes consultar en http://docs.phonegap.com. Para crear tu app simplemente deberás seguir tres sencillos pasos:&lt;/p&gt;

&lt;p&gt;1) &lt;strong&gt;Instala Phonegap&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;Asegúrate de tener instalado NodeJS y ejecuta (en Linux y Mac como superusuario) npm install -g phonegap en tu línea de comandos.&lt;/p&gt;

&lt;p&gt;2) &lt;strong&gt;Crea tu app&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;Ve al directorio donde quieres mantener el código fuente de tu app y ejecuta cordova create hello com.example.hello HelloWorld. Una aplicación llamada HelloWorld habrá sido creada en el directorio hello.&lt;/p&gt;

&lt;p&gt;3) &lt;strong&gt;Diseña tu contenido en HTML5&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;En el subdirectorio www de tu recién creada app encontrarás un archivo index.html y unas subcarpetas CSS y JS con las librerías necesarias para ejecutar tu aplicación. Modifica dicho archivo a tu gusto y crea tu aplicación como si de una página web se tratase.&lt;/p&gt;

&lt;p&gt;Exporta tu app a las distintas plataformas: Android, iOS, Windows Phone…&lt;/p&gt;

&lt;p&gt;Una vez creada tu aplicación deberás seguir los siguientes pasos para poder adaptar tu contenido a las distintas plataformas móviles.&lt;/p&gt;

&lt;p&gt;1) &lt;strong&gt;Añade las plataformas&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;Desde el directorio de tu app ejecuta cordova platform add android, donde android es el nombre de la plataforma, que podrás sustituir por ios, firefoxos, wp7, etc.&lt;/p&gt;

&lt;p&gt;2) &lt;strong&gt;Genera el código para cada plataforma&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;El comando cordova build creará un subdirectorio en platform para cada una de las plataformas con el código específico.&lt;/p&gt;

&lt;p&gt;Puedes gestionar tu flujo de trabajo de mil formas diferentes. Existen infinidad de complementos ya diseñados para proporcionar a tu aplicación funciones avanzadas. Puedes consultar algunos disponibles en la documentación oficial del proyecto.&lt;/p&gt;
</description>
        <pubDate>Fri, 07 Nov 2014 10:23:12 +0100</pubDate>
        <link>https://fricolab.github.io//desarrolla-tu-aplicacion-movil-en-html5/</link>
        <guid isPermaLink="true">https://fricolab.github.io//desarrolla-tu-aplicacion-movil-en-html5/</guid>
        
        <category>cordova</category>
        
        <category>html5</category>
        
        <category>phonegap</category>
        
        
        <category>software</category>
        
      </item>
    
  </channel>
</rss>
